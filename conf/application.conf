# This is the main configuration file for the application.
# ~~~~~

# Host machine IP to connect from outside, also set the SWAGGER
# URL.
hostIp = "localhost"

# body parser maximum content length
# based on Max BSON size 16777216, otherwise it gives exception
parsers.text.maxLength=20M

# cross site
cors.allowed.domain="*"

# Disable plugins we don't need
dbplugin = disabled
evolutionplugin = disabled
ehcacheplugin = disabled

# path to put application, if not specified this will be hosted as
# the root application. If this is fronted by nginx or apache and
# using proxy set this to the same path as the webserver path.
#application.context="/medici"

# Intermediate extractor results cleanup time params (in hours)
intermediateCleanup.checkEvery=1
intermediateCleanup.removeAfter=24

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Signup
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Initial admins of app, this is a list of email addresses who will
# get an email when a new user signs up. This can also be configured
# in the admin menu
initialAdmins=""

# Whether emails for new users registrations go through admins first
registerThroughAdmins=false

# if registerThroughAdmins is true the following message will be
# displayed to the user after they enter their email address.
messageOnStartRegistrationWithAdmin="An admin will review your registration and will, if accepted, forward a registration link to your email."

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Secret key
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use
# the same key!
application.secret="tZ8tQPGe3_QI6ZtSDNs;/4O:F:cIk15fy2R^5HiT;TY?31K59WuwYvAa;I8b/0J9"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Secret Extractor key
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# this should be changed. This key is send to the extractors to
# access the data.
# TODO this is an admin key and should not exist.
commKey=r1ek3rs

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The application languages
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# currently there is no internationalization in medici and all text
# is in english.
application.langs="en"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Logger
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# You can also configure logback (http://logback.qos.ch/), by
# providing a logger.xml file in the conf directory.
logger.root=ERROR
logger.play=INFO
logger.application=DEBUG

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Swagger configuration
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# version number associated with the API
api.version="0.1"
# make sure this is the URL:port of the server
swagger.api.basepath="http://localhost:9000"
# can everybody see the API?
swagger.security.filter="security.AuthorizationFilter"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MongoDB
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The default is for code to use mongo to store all information. This
# will specify how to connect to the mongodb server.
# see http://www.mongodb.org/display/DOCS/Connections
# mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]
mongodb.default = "mongodb://127.0.0.1:27017/test"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RabbitMQ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# All requests to extractors and any other external process is send
# using rabbitmq, this will setup the connection information.
# TODO: change this to a url like mongodb
rabbitmq.host=localhost
rabbitmq.mgmt_api_port="15672"
rabbitmq.exchange=medici
rabbitmq.user=guest
rabbitmq.password="guest"

# consumer tag string within rabbitmq
# TODO do we still nead this?
consumerTag=ctag

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Settings for the PostgreSQL
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Configuration for the postgresql plugin. This will store any of the
# geostreaming API calls. Currently this is the only available
# plugin to store geostreaming data.
# TODO: change this to a JDBC URL
#postgres.user=medici
#postgres.password=postgresPassword

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# GeoStreaming
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# should some of the data be cached for geostream calls. Set this to
# the folder where geostream information can be stored. This will
# create 2 files, one with extension json and one without an
# extension. The json extension file will give information about what
# is stored in the cache. Always remove both files if space becomes
# an issue.
#geostream.cache=/tmp/medici

# The following properties are used when the geostreaming service
# returns the data as type csv instead of json.
json2csv.ignore="type,geometry|type"
json2csv.hideprefix=true
json2csv.seperator=|
json2csv.fixgeometry=true

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FILESYSTEM PLUGINS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# the default is to use MongoDBFileService, to change this you can
# use the following uncomment the following line
#service.files=services.filesystem.FileSystemDB

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FileSystemDB Plugin
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# location on disk where files should be written if using the
# FileSystemDB storage option.
files.path = /tmp/medici

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# IRODSPlugin
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# To use the IRODS filesystem uncomment the following line
#service.files=services.irods.IRODSFileSystemDB
#
# iRODS server host name
irods.host=localhost
# iRODS server port number
irods.port=1247
# Account name
irods.username=anonymous
# Account password
## if irods.username=anonymous use "" for password (irods.password="")
irods.password=""
# Default storage resource name
irods.defaultStorageResource= demoResc
# iRODS zone
irods.zone=tempZone
# Home directory in iRODS
irods.userhome=/tempZone/home/public
# Current directory in iRODS
irods.usercurrent=/tempZone/home/public

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Elasticsearch
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
elasticsearchSettings.clusterName="medici"
elasticsearchSettings.serverAddress="localhost"
elasticsearchSettings.serverPort=9300

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Versus
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
versus.host="http://localhost:8080/api/v1"
versus.client="http://localhost:9000"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DTS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#temporary directory for upload file based on url
tmpdir=/var/tmp/dtsdir/

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# RDF
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Dumps variables
#filedump.dir="C:\\mongodumpfiles"
filedump.dir="/var/tmp/medici/mongodumpfiles"

#RDF metadata export variables
#Dircount is the number of mappings to use. Each schema path follows, defined as filesxmltordfmapping.dir_<schema number> or datasetsxmltordfmapping.dir_<schema number>
#First schema is also used for generating RDF metadata to upload to a communicating RDF store, if such is used
filesxmltordfmapping.dircount = "1"
filesxmltordfmapping.dir_1="conf\\fileUserMetadataRDFMapping.xml"

datasetsxmltordfmapping.dircount = "1"
datasetsxmltordfmapping.dir_1="conf\\datasetUserMetadataRDFMapping.xml"

#rdfdumptemporary.dir="C:\\rdfdumptemporaryfiles"
rdfdumptemporary.dir="/var/tmp/medici/rdfdumptemporaryfiles"

#Community-generated metadata temp exports cleanup time params (in minutes)
rdfTempCleanup.checkEvery=30
rdfTempCleanup.removeAfter=5

#RDF store and SPARQL stuff

userdfSPARQLStore="no"
rdfEndpoint="http://medici-dev.cyi.ac.cy:10100"
rdfXMLGraphName="http://medici-dev.cyi.ac.cy/xmlRDF"
rdfCommunityGraphName="http://medici-dev.cyi.ac.cy/usersRDF"
rootNodesFile="conf\\rdfRootNodes.txt"
datasetRootNodesFile="conf\\datasetRdfRootNodes.txt"

#RDF store update interval (in hours)
#rdfRepoUpdate.updateEvery=24

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Configuration file for securesocial
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include "securesocial.conf"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Content types
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# mapping of file extension to mime-type
include "mimetypes.conf"

