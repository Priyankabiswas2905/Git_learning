# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET      /                                                                   controllers.Application.index


# Users
GET      /users                                                              controllers.Users.list
GET      /users/by-country/:country                                          controllers.Users.listByCountry(country)
GET      /users/create/:username                                             controllers.Users.create(username)
GET      /users/view/:id                                                     controllers.Users.view(id)
POST	 /users/registerThroughAdmins										 controllers.Users.handleStartSignUp

# Files
GET		/files					          @controllers.Files.list(when: String ?= "", date: String ?= "", size: Int ?= 10)
GET		/files/new					      @controllers.Files.uploadFile
GET     /files/metadataSearch          	  @controllers.Files.metadataSearch
GET     /files/generalMetadataSearch      @controllers.Files.generalMetadataSearch
GET		/files/:id					      @controllers.Files.file(id)
GET		/files/:id/blob			          @controllers.Files.download(id)
#GET     /queries/:id/blob				  @controllers.Files.downloadquery(id)
#GET     /files/:id/similar               @controllers.Files.findSimilar(id)
POST    /upload					          @controllers.Files.upload
POST   /uploadSelect                      @controllers.Files.uploadSelect
POST   /uploadSelectQuery                 @controllers.Files.uploadSelectQuery
#POST   	/uploadAjax					  @controllers.Files.uploadAjax
POST   	/uploaddnd/:id					  @controllers.Files.uploaddnd(id)
#POST  	/reactiveUpload					  @controllers.Files.reactiveUpload
POST    /uploadDragDrop					  @controllers.Files.uploadDragDrop
GET		/fileThumbnail/:id/blob			  @controllers.Files.thumbnail(id)

# Datasets
GET		/datasets					      @controllers.Datasets.list(when: String ?= "", date: String ?= "", size: Int ?= 10)
GET     /datasets/new                     @controllers.Datasets.newDataset
GET     /datasets/metadataSearch          @controllers.Datasets.metadataSearch
GET     /datasets/generalMetadataSearch   @controllers.Datasets.generalMetadataSearch
GET		/datasets/:id					  @controllers.Datasets.dataset(id)
GET     /datasets_by_section/:id          @controllers.Datasets.datasetBySection(id)
POST    /dataset/submit                   @controllers.Datasets.submit

# Collections
GET      /collections                                                        @controllers.Collections.list(when: String ?= "", date: String ?= "", size: Int ?= 10)
GET      /collections/new                                                    @controllers.Collections.newCollection
POST     /collection/submit                                                  @controllers.Collections.submit
GET      /collection/:id                                                     @controllers.Collections.collection(id)	

# Tags
GET     /tags/search                      controllers.Tags.search(tag)

# Authentication
GET      /loginTest                                                          controllers.Authentication.login
POST     /loginTest                                                          controllers.Authentication.loginSubmit

# Search
GET      /search                                                             @controllers.Search.search(query: String ?= "")
GET      /multimediasearch                                                   @controllers.Search.multimediasearch
#GET     /multimediaserach1                                                  @controllers.Search.multimediasearch1(f,id)
GET      /advanced                                                           @controllers.Search.advanced
GET      /SearchByText                                                       @controllers.Search.SearchByText(query: String ?= "")
POST     /uploadquery                                                        @controllers.Search.uploadquery	
GET      /searchbyURL                                                        @controllers.Search.searchbyURL(query:String?="")
GET      /Filterby                                                           @controllers.Search.Filterby(id)
GET      /searchbyfeature                                                    @controllers.Search.searchMultimediaIndex(section_id)
GET      /files/:id/similar                                                  @controllers.Search.findSimilarFile(id)
GET      /queries/:id/similar                                                @controllers.Search.findSimilar(id)

# Previewers
GET      /previewers/list                                                    controllers.Previewers.list	

# Map static resources from the /public folder to the /assets URL path
GET      /assets/img/glyphicons-halflings-white.png                          controllers.Assets.at(path="/public", file="/images/glyphicons-halflings-white.png")
GET      /assets/img/glyphicons-halflings.png                                controllers.Assets.at(path="/public", file="/images/glyphicons-halflings.png")
GET      /assets/*file                                                       controllers.Assets.at(path="/public", file)

# test json
GET      /test                                                               controllers.Application.testJson

## SecureSocial ##

# Login page
GET      /login                                                              securesocial.controllers.LoginPage.login
GET      /logout                                                             securesocial.controllers.LoginPage.logout

# User Registration
GET      /signup                                                             securesocial.controllers.Registration.startSignUp
POST     /signup                                                             securesocial.controllers.Registration.handleStartSignUp
GET      /signup/:token                                                      securesocial.controllers.Registration.signUp(token)
POST     /signup/:token                                                      securesocial.controllers.Registration.handleSignUp(token)
GET      /reset                                                              securesocial.controllers.Registration.startResetPassword
POST     /reset                                                              securesocial.controllers.Registration.handleStartResetPassword
GET      /reset/:token                                                       securesocial.controllers.Registration.resetPassword(token)
POST     /reset/:token                                                       securesocial.controllers.Registration.handleResetPassword(token)
GET      /password                                                           securesocial.controllers.PasswordChange.page
POST     /password                                                           securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
GET      /authenticate/:provider                                             securesocial.controllers.ProviderController.authenticate(provider)
POST     /authenticate/:provider                                             securesocial.controllers.ProviderController.authenticateByPost(provider)
GET      /not-authorized                                                     securesocial.controllers.ProviderController.notAuthorized

# Administration pages
GET      /admin                                                              controllers.Admin.main
GET      /admin/test                                                         controllers.Admin.test
GET      /admin/secureTest                                                   controllers.Admin.secureTest
GET      /admin/reindexFiles                                                 controllers.Admin.reindexFiles
GET     /admin/adapters             controllers.Admin.getAdapters
GET		/admin/extractors			controllers.Admin.getExtractors
GET		/admin/measures				controllers.Admin.getMeasures
GET		/admin/indexers				controllers.Admin.getIndexers
GET 	/admin/index				controllers.Admin.getIndexes
GET		/admin/addAdmin				controllers.Admin.newAdmin
GET		/admin/listAdmins			controllers.Admin.listAdmins
POST    /admin/submitNew 			controllers.Admin.submitNew
POST    /admin/createIndex  		controllers.Admin.createIndex
POST  	 /admin/index/:id/build     controllers.Admin.buildIndex(id:String)
GET		 /admin/dataDumps			controllers.Admin.viewDumpers
DELETE   /admin/index/:id/delete    controllers.Admin.deleteIndex(id:String)
DELETE 	/admin/index/deleteAll		controllers.Admin.deleteAllIndexes

GET      /admin/extractions                                                  controllers.Extractors.extractions
POST    /admin/theme                controllers.Admin.setTheme

# Javascript Endpoints
GET      /javascriptRoutes                                                   controllers.Application.javascriptRoutes

# API documentation using Swagger
GET      /api-docs.json                                                      controllers.ApiHelpController.getResources

# Rest API
POST	/api/files/:three_d_file_id/geometries/:geometry_id		@api.Files.attachGeometry(three_d_file_id,geometry_id)
POST	/api/files/:three_d_file_id/3dTextures/:texture_id		@api.Files.attachTexture(three_d_file_id,texture_id)
POST	/api/files/:file_id/thumbnails/:thumbnail_id			@api.Files.attachThumbnail(file_id,thumbnail_id)
GET     /api/files                        						@api.Files.list
POST    /api/files                        						@api.Files.upload(showPreviews: String ?= "DatasetLevel", originalZipFile: String ?= "")
POST	/api/files/searchusermetadata							@api.Files.searchFilesUserMetadata
POST	/api/files/searchmetadata								@api.Files.searchFilesGeneralMetadata
POST    /api/uploadToDataset/:id                        		@api.Files.uploadToDataset(id, showPreviews: String ?= "DatasetLevel", originalZipFile: String ?= "")
POST	/api/files/uploadIntermediate/:idAndFlags				@api.Files.uploadIntermediate(idAndFlags)
POST	/api/files/sendJob/:fileId/:fileType					@api.Files.sendJob(fileId,fileType)
GET		/api/files/getRDFURLsForFile/:id						@api.Files.getRDFURLsForFile(id)
GET		/api/files/rdfUserMetadata/:id							@api.Files.getRDFUserMetadata(id, mappingNum: String ?= "1")
POST	/api/files/:fileId/remove								@api.Files.removeFile(fileId) 
GET     /api/files/:id/metadata           						@api.Files.get(id)
POST    /api/files/:id/metadata           						@api.Files.addMetadata(id)
POST    /api/files/:id/usermetadata	  							@api.Files.addUserMetadata(id)
GET     /api/files/:id/technicalmetadatajson           			@api.Files.getTechnicalMetadataJSON(id)
GET     /api/files/:id/xmlmetadatajson           				@api.Files.getXMLMetadataJSON(id)
GET     /api/files/:id/usermetadatajson           				@api.Files.getUserMetadataJSON(id)
POST    /api/files/:id/comment									@api.Files.comment(id)

GET     /api/files/:id/tags                                     @api.Files.getTags(id)
POST    /api/files/:id/tags                                     @api.Files.addTags(id)
POST    /api/files/:id/tags/remove                              @api.Files.removeTags(id)
POST    /api/files/:id/tags/remove_all                          @api.Files.removeAllTags(id)

POST    /api/files/:id/previews/:p_id     						@api.Files.attachPreview(id, p_id)
GET		/api/files/:id/listpreviews		  						@api.Files.filePreviewsList(id)
GET		/api/files/:id/getPreviews								@api.Files.getPreviews(id)
GET		/api/files/:id/isBeingProcessed							@api.Files.isBeingProcessed(id)
#GET		/api/files/:three_d_file_id/:filename					@api.Files.getGeometry(three_d_file_id,filename)
GET		/api/files/:three_d_file_id/:filename					@api.Files.getTexture(three_d_file_id,filename)
GET     /api/files/:id                    						@api.Files.download(id)
GET     /api/queries/:id				                       @api.Files.downloadquery(id)	


# DANGER
GET     /api/delete-data                    					api.Admin.deleteAllData

POST	/api/remove-admin										api.Admin.removeAdmin
POST	/api/changeAppearance									api.Admin.submitAppearance
POST	/api/dumpFilesMd										@api.Files.dumpFilesMetadata
POST	/api/dumpDatasetGroupings								@api.Datasets.dumpDatasetGroupings

GET     /api-docs.json/datasets           controllers.ApiHelpController.getResource(path = "/api-docs.json/datasets")

POST	/api/collections/:coll_id/datasets/:ds_id									@api.Collections.attachDataset(coll_id,ds_id)
POST	/api/collections/:coll_id/datasetsRemove/:ds_id/:ignoreNotFound				@api.Collections.removeDataset(coll_id,ds_id,ignoreNotFound)
POST	/api/collections/:coll_id/remove											@api.Collections.removeCollection(coll_id)
GET		/api/collections/:coll_id/getDatasets										@api.Datasets.getInCollection(coll_id)

GET    	/api/datasets					  							@api.Datasets.list
POST    /api/datasets                                           	@api.Datasets.createDataset
POST	/api/datasets/searchusermetadata							@api.Datasets.searchDatasetsUserMetadata
POST	/api/datasets/searchmetadata								@api.Datasets.searchDatasetsGeneralMetadata
GET		/api/datasets/listOutsideCollection/:coll_id				@api.Datasets.listOutsideCollection(coll_id)
POST	/api/datasets/:ds_id/filesRemove/:file_id/:ignoreNotFound	@api.Datasets.detachFile(ds_id,file_id,ignoreNotFound)
GET		/api/datasets/getRDFURLsForDataset/:id						@api.Datasets.getRDFURLsForDataset(id)
GET		/api/datasets/rdfUserMetadata/:id							@api.Datasets.getRDFUserMetadata(id, mappingNum: String ?= "1")
POST	/api/datasets/:datasetId/remove								@api.Datasets.deleteDataset(datasetId) 
POST    /api/datasets/:id/metadata		  							@api.Datasets.addMetadata(id)
POST    /api/datasets/:id/usermetadata	  							@api.Datasets.addUserMetadata(id)
GET     /api/datasets/:id/technicalmetadatajson           			@api.Datasets.getTechnicalMetadataJSON(id)
GET     /api/datasets/:id/xmlmetadatajson           				@api.Datasets.getXMLMetadataJSON(id)
GET     /api/datasets/:id/usermetadatajson           				@api.Datasets.getUserMetadataJSON(id)
GET 	/api/datasets/:id/listFiles		 							@api.Datasets.datasetFilesList(id)
POST    /api/datasets/:id/comment									@api.Datasets.comment(id)

POST 	/api/datasets/:id/removeTag 								@api.Datasets.removeTag(id)
GET     /api/datasets/:id/tags                                  @api.Datasets.getTags(id)
POST    /api/datasets/:id/tags                                  @api.Datasets.addTags(id)
POST    /api/datasets/:id/tags/remove                           @api.Datasets.removeTags(id)
POST    /api/datasets/:id/tags/remove_all                       @api.Datasets.removeAllTags(id)

GET		/api/datasets/:id/isBeingProcessed							@api.Datasets.isBeingProcessed(id)
GET		/api/datasets/:id/getPreviews								@api.Datasets.getPreviews(id)
POST	/api/datasets/:ds_id/files/:file_id							@api.Datasets.attachExistingFile(ds_id,file_id)
GET 	/api/datasets/:id				 							@api.Datasets.datasetFilesList(id)


GET     /api/previews/:preview_id/textures/dataset/:datasetid/json					api.Previews.downloadPreview(preview_id, datasetid)
GET     /api/previews/:preview_id/textures/dataset/:dataset_id//:filename			@api.Files.downloadByDatasetAndFilename(dataset_id, filename, preview_id)
GET		/api/previews/:dzi_id_dir/:level/:filename									api.Previews.getTile(dzi_id_dir, level, filename)
POST    /api/previews/:dzi_id/tiles/:tile_id/:level     							api.Previews.attachTile(dzi_id, tile_id, level)
POST    /api/previews/:id/metadata        											api.Previews.uploadMetadata(id)
GET     /api/previews/:id/metadata        											api.Previews.getMetadata(id)
POST    /api/previews/:id/annotationAdd        									    api.Previews.attachAnnotation(id)
POST    /api/previews/:id/annotationEdit        									api.Previews.editAnnotation(id)
GET     /api/previews/:id/annotationsList        									api.Previews.listAnnotations(id)
GET     /api/previews/:id                 											api.Previews.download(id)
POST    /api/previews                     											api.Previews.upload(iipKey: String ?= "")

POST     /api/indexes                                                        api.Indexes.index
POST     /api/indexes/features                                               api.Indexes.features

POST    /api/sections                                           @api.Sections.add
GET     /api/sections/:id                                       @api.Sections.get(id)
POST    /api/sections/:id/comments                              @api.Sections.comment(id)

GET     /api/sections/:id/tags                                  @api.Sections.getTags(id)
POST    /api/sections/:id/tags                                  @api.Sections.addTags(id)
POST    /api/sections/:id/tags/remove                           @api.Sections.removeTags(id)
POST    /api/sections/:id/tags/remove_all                       @api.Sections.removeAllTags(id)

# geostreaming

POST    /api/geostreams/datapoints        api.Geostreams.addDatapoint
GET     /api/geostreams/datapoints/:id    api.Geostreams.getDatapoint(id: String)
GET     /api/geostreams/datapoints        api.Geostreams.searchDatapoints(since: Option[String] ?= None, until: Option[String] ?= None, geocode: Option[String] ?= None,  stream_id: Option[String] ?= None)


POST    /api/geostreams/sensors			     api.Geostreams.createSensor
GET     /api/geostreams/sensors/:id/stats    api.Geostreams.getSensorStatistics(id: String)
GET     /api/geostreams/sensors/:id/streams  api.Geostreams.getSensorStreams(id: String)
GET     /api/geostreams/sensors/:id          api.Geostreams.getSensor(id: String)
GET     /api/geostreams/sensors              api.Geostreams.searchSensors(geocode: Option[String] ?= None)

POST    /api/geostreams/streams			  api.Geostreams.createStream
GET     /api/geostreams/streams/:id       api.Geostreams.getStream(id: String)
GET     /api/geostreams/streams           api.Geostreams.searchStreams(geocode: Option[String] ?= None)
DELETE  /api/geostreams/streams/:id       api.Geostreams.deleteStream(id: String)

DELETE  /api/geostreams/dropall           api.Geostreams.deleteAll
GET     /api/geostreams/counts            api.Geostreams.counts

GET     /geostreams                       controllers.Geostreams.browse


POST	/api/tiles						  api.ZoomIt.uploadTile
POST	/api/geometries					  api.Geometry.uploadGeometry
POST	/api/3dTextures					  api.ThreeDTexture.uploadTexture
POST    /api/fileThumbnail                api.Thumbnail.uploadThumbnail

GET      /api/sensors                                                        api.Sensors.list
POST     /api/sensors                                                        api.Sensors.add
GET      /api/sensors/:id                                                    api.Sensors.get(id)
GET      /api/sensors/search                                                 api.Sensors.search
DELETE   /api/sensors/:id                                                    api.Sensors.delete(id)

POST	/api/comment/:id					@api.Comments.comment(id)

GET   	/api/search                       @api.Search.search(query: String ?= "")
POST	/api/sparqlquery				  @api.Search.querySPARQL

